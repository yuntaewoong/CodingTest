#include <iostream>

using namespace std;



int N;//(1<=N<=200)
int K;//(1<=K<=200)

long long DP[201][201];

//문제: 0부터 N까지의 정수중에서 K개를 선택해서 더했을때 합이 N이 되는 경우의수 구하기
//선택할때는 하나의 정수를 여러번 선택할수 있음
//덧셈의 순서가 바뀐경우는 다른경우(1+2와 2+1은 다른경우)


//DP접근법
//DP[a][b] = c "0부터 N까지의 정수중 a개 더해서 그 합이 b가 되는 경우의 수는 c다"
//구하는 값: DP[K][N]


/*
	0	1	2	3	4	5
1	1	1	1	1	1	1
2	1	2	3	4	5	6
3	1	3	6	10	15	21
4	1	
5	1

요약: a개 더해서 b를 만드는 경우의수는 a-1개 더해서 b이하의 수를 만드는 모든 경우의 수의 합과 같다
	(이유: a-1개 더해서 b이하 수 만든경우에 숫자 하나 더 고르면 a가 되니까)
*/


//Case
//N:20, K:2
//(20+0),(19+1),(18+2) ... (1+19)(0+20) => 21개

int main()
{
	cin >> N >> K;

	for (int j = 0; j <= N; j++)
	{
		DP[1][j] = 1;//첫번째 행은 모두 1
	}
	for (int i = 1; i <= K; i++)
	{
		DP[i][0] = 1;//첫번째 열은 모두 1
	}
	for (int i = 2; i <= K; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			DP[i][j] = (DP[i - 1][j] + DP[i][j - 1]) % 1000000000;
		}
	}

	/*for (int i = 1; i <= K; i++)
	{
		for (int j = 0; j <= N; j++)
		{
			cout << DP[i][j] << " ";
		}
		cout << "\n";
	}*/
	cout << DP[K][N] ;
}